!function(){ function jPesos(opts) { var j$ = {}; opts = opts || {}; opts.pfx = opts.pfx || ''; opts.pfxr = opts.pfxr || '$x'; opts.root = opts.root || document; j$.opts = opts; j$.find = function(s, p) { var out = {}; out.length = 0; var x = opts.pfx; var p = p || opts.root; var ts = typeof s; if (ts == 'undefined') { out.type = ts; out.length = 0; out.type = ts; } else if (s == null) { out[0] = s; out.length = 1; out.type = 'object'; } else if (s instanceof RegExp) { out[0] = s; out.length = 1; out.type = 'regexp'; } else { if (s.isj$ && s.type == 'html') { for (var i = 0; i < s.length; i++) { out[out.length] = s[i]; out.length++; out.type = 'html'; } } else if (j$.arr(s)) { s.forEach(function(l) { out[out.length] = l; out.length++; }); out.type = 'array'; } else if (NodeList.prototype.isPrototypeOf(s)) { s.forEach(function(l) { out[out.length] = l; out.length++; }); out.type = 'html'; } else if (s instanceof Event) { out[0] = s; out.length = 1; out.type = 'event'; } else if (s.tagName || s == document || s == window) { out[0] = s; out.length = 1; out.type = 'html'; } else if (ts == 'object') { out[0] = s; for (var n in s) { out.length++; } out.type = 'object'; } else if (ts == 'string') { var tmp = []; var pq = j$.find(p); var x = opts.pfx; var xr = opts.pfxr; s = j$.replace(xr, x, s); pq.each(function(q) { try { var rs = q.querySelectorAll(s); rs.forEach(function(l) { if (!j$.spot(l, tmp)) tmp.push(l); }); } catch (err) {}; }); tmp.forEach(function(l) { out[out.length] = l; out.length++; }); out.type = 'html'; } else { out[0] = s; out.length = 1; out.type = ts; } } if (s !== null) { out.isj$ = true; } if (ts !== 'undefined') { out.each = function(cb) { for (var i = 0; i < out.length; i++) { cb(out[i], i); } }; } if (ts !== 'undefined') { out.eq = function(i) { return j$.find(out[i]); }; } if (out.type == 'html') { out.find = function(s) { var p = []; var x = opts.pfx; var l = out.length; for (var i = 0; i < l; i++) { p.push(out[i]); } p.type = 'html'; return j$.find(s, p, x); }; } if (out.type == 'html') { out.add = function(tag) { var o = []; tag = tag || 'div'; out.each(function(p) { if (!j$.def(tag.nodeName)) { var el = document.createElement(tag); } else { var el = tag; } p.appendChild(el); o.push(el); }); o.type = 'html'; o.isj$ = true; return j$.find(o); }; } if (out.type == 'html') { out.del = function() { out.each(function(el) { try { el.parentNode.removeChild(el); } catch (err) {}; }); return out; }; } if (out.type == 'html') { out.parent = function() { var o = []; out.each(function(el) { var tkn = false; var p = el.parentNode; o.forEach(function(t) { if (t === p) tkn = true; }); if (!tkn && p) o.push(p); }); o.type = 'html'; o.isj$ = true; return j$.find(o); }; } if (out.type == 'html') { out.prev = function() { var o = []; out.each(function(el) { var tkn = false; var p = el.previousElementSibling; o.forEach(function(t) { if (t === p) tkn = true; }); if (!tkn && p) o.push(p); }); o.type = 'html'; o.isj$ = true; return j$.find(o); }; } if (out.type == 'html') { out.next = function() { var o = []; out.each(function(el) { var tkn = false; var p = el.nextElementSibling; o.forEach(function(t) { if (t === p) tkn = true; }); if (!tkn && p) o.push(p); }); o.type = 'html'; o.isj$ = true; return j$.find(o); }; } if (out.type == 'html') { out.addHTML = function(htm) { if (htm !== 0) htm = htm || ''; out.each(function(el) { el.innerHTML += htm; }); return out; }; } if (out.type == 'html') { out.delHTML = function() { out.each(function(el) { el.innerHTML = ''; }); return out; }; } if (out.type == 'html') { out.addAttr = function(atr, val) { atr = atr || {}; out.each(function(el) { if (j$.str(atr)) { el.setAttribute(atr, val); } else { for (var k in atr) { el.setAttribute(k, atr[k]); } } }); return out; }; } if (out.type == 'html') { out.delAttr = function() { var atr = arguments; out.each(function(el) { for (var i = 0; i < atr.length; i++) { el.removeAttribute(atr[i]); } }); return out; }; } if (out.type == 'html') { out.addClass = function(cls, pfx) { if (!j$.def(pfx)) pfx = x; if (pfx) pfx += '-'; cls = cls || ''; if (j$.arr(cls)) { cls = cls.join(' '); } cls = cls.replace('\n', ' '); cls = cls.replace(/\s+/g, ' '); cls = cls.split(' '); out.each(function(el) { cls.forEach(function(cls) { cls = cls.trim(); if (cls) el.classList.add(pfx + cls); }); if (!el.classList.length && j$.def(el.attributes['class'])) { el.removeAttribute('class'); } }); return out; }; } if (out.type == 'html') { out.delClass = function(cls, pfx) { if (!j$.def(pfx)) pfx = x; if (pfx) pfx += '-'; cls = cls || ''; if (j$.arr(cls)) { cls = cls.join(' '); } cls = cls.replace('\n', ' '); cls = cls.replace(/\s+/g, ' '); cls = cls.split(' '); out.each(function(el) { cls.forEach(function(cls) { cls = cls.trim(); if (cls) el.classList.remove(pfx + cls); }); if (!el.classList.length && j$.def(el.attributes['class'])) { el.removeAttribute('class'); } }); return out; }; } if (out.type == 'html') { out.pfxClass = function(pfx) { if (!j$.def(pfx)) pfx = x; out.each(function(el) { var cls = el.classList; clss = []; cls.forEach(function(cls) { cls = cls.replace(pfx + '-', ''); clss.push(cls); }); el.className = ''; j$.find(el).addClass(clss, pfx); }); return out; }; } if (out.type == 'html') { out.addCSS = function(cls, val) { cls = cls || {}; out.each(function(el) { if (j$.str(cls)) { el.style[cls] = val; } else { for (var k in cls) { el.style[k] = cls[k]; } } }); return out; }; } if (out.type == 'html') { out.on = function(ev, fn) { var doc = document; if (j$.str(ev)) ev = [ev]; ev.forEach(function(ev) { out.each(function(el) { if (!j$.def(el.j$EventListeners)) { el.j$EventListeners = {}; el.j$EventListeners.length = 0; } var j$ls = el.j$EventListeners; j$ls.length++; j$ls['f' + j$ls.length] = fn; if (el == doc && ev == 'ready') { ev = 'DOMContentLoaded'; doc.readyState != 'loading' ? fn(null, el) : el.addEventListener(ev, function(e) { fn(e, el); }); } else { el.addEventListener(ev, function(e) { fn(e, el); }); } }); }); return out; }; } if (out.type == 'html') { out.off = function(ev, fn) { var doc = document; if (j$.str(ev)) ev = [ev]; ev.forEach(function(ev) { out.each(function(el) { if (!j$.def(el.j$EventListeners)) { el.j$EventListeners = {}; el.j$EventListeners.length = 0; } var j$ls = el.j$EventListeners; if (el == doc && ev == 'ready') { ev = 'DOMContentLoaded'; } if (j$.def(fn)) { el.removeEventListener(ev, fn); } else { for (var i = 0; i < j$ls.length; i++) { el.removeEventListener(ev, j$ls['f' + i]); } el.j$EventListeners = {}; } }); }); return out; }; } if (out.type == 'html') { out.trigger = function(ev, data) { var doc = document; data = data || null; if (j$.str(ev)) ev = [ev]; ev.forEach(function(ev) { out.each(function(el) { try { var event = document.createEvent('HTMLEvents'); event.initEvent(ev, true, false); event.detail = data; } catch (err) { if (window.CustomEvent && j$.fun(window.CustomEvent)) { var event = new CustomEvent(ev, { detail: data }); } else { var event = document.createEvent('CustomEvent'); event.initCustomEvent(ev, true, true, data); } } el.dispatchEvent(event); }); }); return out; }; } if (out.type == 'event') { out.stop = function() { out.each(function(e) { var evt = e ? e : window.event; if (evt.stopPropagation) evt.stopPropagation(); if (evt.cancelBubble != null) evt.cancelBubble = true; }); return out; }; } return out; }; j$.def = function(v) { return typeof v !== 'undefined'; }; j$.obj = function(v) { return typeof v == 'object'; }; j$.arr = function(v) { return Array.isArray(v); }; j$.str = function(v) { return typeof v == 'string'; }; j$.num = function(v) { return !isNaN(v); }; j$.fun = function(v) { return typeof v == 'function'; }; j$.rgx = function(v) { return v instanceof RegExp; }; j$.xhr = function(url, opts) { opts = opts || {}; opts.method = opts.method || 'GET'; opts.method = opts.method.toUpperCase(); opts.sync = opts.sync || false; opts.user = opts.user || ''; opts.pass = opts.pass || ''; opts.data = opts.data || null; opts.headers = opts.headers || []; opts.callback = opts.callback || function() {}; var xhr = new XMLHttpRequest(); xhr.open(opts.method, url, opts.sync, opts.user, opts.pass); opts.headers.forEach(function(a) { a = a.split(':'); if (a[0] && a[1]) { xhr.setRequestHeader(a[0].trim(), a[1].trim()); } }); xhr.onreadystatechange = function() { var rst = xhr.readyState; var res = xhr.responseText; if (rst == 4) opts.callback(res); }; xhr.send(opts.data); }; j$.param = function(key) { var query = window.location.search.substring(1); var vars = query.split("&"); var pms = {}; for (var i = 0; i < vars.length; i++) { var pair = vars[i].split("="); p0 = pair[0]; p1 = pair[1]; j$.def(p1) ? pms[p0] = p1 : pms[p0] = ''; } if (j$.def(key)) return pms[key]; return pms; }; j$.cookie = function(n, v, t) { t = t || 365; t = t * 24 * 60 * 60 * 1000; var dc = document.cookie; if (j$.def(v)) { var d = new Date(); if (v || v === 0) { d.setTime(d.getTime() + t); } else { d.setTime(0); } var str = ''; str += n + '='; str += v + ';'; str += 'path=/;'; str += 'SameSite=Lax;'; str += 'expires=' + d.toUTCString() + ';'; document.cookie = str; return v; } else { var cs = decodeURIComponent(dc); var ck = {}; ca = cs.split(';'); ca.forEach(function(c) { c = c.trim(); var a = c.split('='); ck[a[0]] = a[1]; }); if (j$.def(n)) { return ck[n] || ''; } else { return ck; } } }; j$.wait = function(t, cb) { var tm = setTimeout(cb, t); var o = {}; o.id = tm; o.stop = function() { clearInterval(tm); }; return o; }; j$.timer = function(t, cb) { var tm = setInterval(cb, t); var o = {}; o.id = tm; o.stop = function() { clearInterval(tm); }; return o; }; j$.spot = function(n, h) { return h.indexOf(n) > -1; }; j$.hasClass = function(el, cls, pfx) { var has = false; pfx = pfx || opts.pfx; cls = cls || ''; if (pfx) cls = pfx + '-' + cls; el.classList.forEach(function(c) { if (c == cls) has = true; return; }); return has; }; j$.escRegex = function(str) { return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); }; j$.replace = function(srch, repl, str, flag) { srch = j$.escRegex(srch); flag = flag || 'gim'; var rx = new RegExp(srch, flag); return str.replace(rx, repl); }; j$.$ = j$.find; for (var k in j$) { j$.$[k] = j$[k]; } return j$; }; function initApp() { console.log('PSMod initialized.'); } try {initApp();}catch(err){}; }();