/*PS Mod - 2020 KaisarCode*/
(function(){ var x = 'psmod'; var cfg = { name: 'PS Mod', description: 'PrestaShop module', version: '1.0.0', author: 'KaisarCode', email: 'kaisar@kaisarcode.com' };var is = {}; is.def = function(v){ return typeof v !== 'undefined'; }; is.obj = function(v){ return typeof v == 'object'; }; is.arr = function(v){ return Array.isArray(v); }; is.str = function(v){ return typeof v == 'string'; }; is.num = function(v) { return !isNaN(v); }; is.fun = function(v) { return typeof v == 'function'; }; is.rgx = function(v) { return v instanceof RegExp; }; (typeof process !== 'undefined') && (typeof process.versions !== 'undefined') && (typeof process.versions.node !== 'undefined') ? module.exports = is : true;function on(el, ev, fn) { var doc = document; if (typeof ev == 'string' ) ev = [ev]; typeof el != 'string' ? el = [el]: el = document.querySelectorAll(el); ev.forEach(function(ev){ el.forEach(function(el){ if (el == doc && ev == 'ready') { ev = 'DOMContentLoaded'; doc.readyState != 'loading' ? fn(null, el) : el.addEventListener(ev, function(e){ fn(e, el); }); } else { el.addEventListener(ev, function(e){ fn(e, el); }); } }); }); };function wait(t, cb) { this.t = 0; var ths = this; function proc(t, cb) { var obj = {}; obj.wait = proc; ths.t = ths.t + t; var i = setTimeout(cb, ths.t); obj.stop = function(){ clearInterval(i); return obj; }; return obj; }; return proc(t, cb); }; (typeof process !== 'undefined') && (typeof process.versions !== 'undefined') && (typeof process.versions.node !== 'undefined') ? module.exports = wait : true;function jreq(mth, url, data, cb) { var xhr = new XMLHttpRequest(); xhr.open(mth, url, true); xhr.setRequestHeader('accept', 'application/json'); xhr.setRequestHeader('Content-Type', 'application/json'); if (typeof data == 'object') data = JSON.stringify(data); xhr.send(data); xhr.onreadystatechange = function() { if (xhr.readyState === 4){ var res = xhr.response; cb(res, xhr.state); } }; return xhr; };function jPesos(opts) { var j$ = {}; opts = opts || {}; opts.pfx = opts.pfx || ''; opts.pfxr = opts.pfxr || '$x'; j$.opts = opts; var is = {}; is.def = function(v){ return typeof v !== 'undefined'; }; is.obj = function(v){ return typeof v == 'object'; }; is.arr = function(v){ return Array.isArray(v); }; is.str = function(v){ return typeof v == 'string'; }; is.num = function(v) { return !isNaN(v); }; is.fun = function(v) { return typeof v == 'function'; }; is.rgx = function(v) { return v instanceof RegExp; }; function rplc(srch, repl, str, flag) { srch = srch.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); flag = flag || 'gim'; var rx = new RegExp(srch, flag); return str.replace(rx, repl); }; j$.find = function(s, p){ var out = {}; out.length = 0; var x = opts.pfx; var pfxr = opts.pfxr; var p = p || document; var ts = typeof s; if (ts == 'undefined') { out.type = ts; out.length = 0; out.type = ts; } else if (s == null) { out[0] = s; out.length = 1; out.type = 'object'; } else if (s instanceof RegExp) { out[0] = s; out.length = 1; out.type = 'regexp'; } else { if (s.isj$ && s.type == 'html') { for (var i = 0; i < s.length; i++) { out[out.length] = s[i]; out.length++; out.type = 'html'; } } else if (is.arr(s)) { s.forEach(function(l){ out[out.length] = l; out.length++; }); out.type = 'array'; } else if (NodeList.prototype.isPrototypeOf(s)) { s.forEach(function(l){ out[out.length] = l; out.length++; }); out.type = 'html'; } else if (s instanceof Event) { out[0] = s; out.length = 1; out.type = 'event'; } else if (s.tagName || s == document || s == window) { out[0] = s; out.length = 1; out.type = 'html'; } else if (ts == 'object') { out[0] = s; for (var n in s) { out.length++; } out.type = 'object'; } else if (ts == 'string') { var tmp = []; var pq = j$.find(p); var x = opts.pfx; var xr = opts.pfxr; s = rplc(xr, x, s); pq.each(function(q){ try { var rs = q.querySelectorAll(s); rs.forEach(function(l){ if (!tmp.indexOf(l) > -1) tmp.push(l); }); } catch (err) {}; }); tmp.forEach(function(l){ out[out.length] = l; out.length++; }); out.type = 'html'; } else { out[0] = s; out.length = 1; out.type = ts; } } if (s !== null) { out.isj$ = true; } if (ts !== 'undefined') { out.each = function(cb) { for (var i = 0; i < out.length; i++) { cb(out[i], i); } }; } if (ts !== 'undefined') { out.eq = function(i) { return j$.find(out[i]); }; } if (out.type == 'html') { out.find = function(s) { var p = []; var x = opts.pfx; var l = out.length; for (var i = 0; i < l; i++) { p.push(out[i]); } p.type = 'html'; return j$.find(s, p, x); }; } if (out.type == 'html') { out.add = function(tag) { var o = []; tag = tag || 'div'; out.each(function(p){ if (!is.def(tag.nodeName)) { var el = document.createElement(tag); } else { var el = tag; } p.appendChild(el); o.push(el); }); o.type = 'html'; o.isj$ = true; return j$.find(o); }; } if (out.type == 'html') { out.del = function() { out.each(function(el){ try { el.parentNode.removeChild(el); } catch (err) {}; }); return out; }; } if (out.type == 'html') { out.parent = function() { var o = []; out.each(function(el){ var tkn = false; var p = el.parentNode; o.forEach(function(t){ if (t === p) tkn = true; }); if (!tkn && p) o.push(p); }); o.type = 'html'; o.isj$ = true; return j$.find(o); }; } if (out.type == 'html') { out.prev = function() { var o = []; out.each(function(el){ var tkn = false; var p = el.previousElementSibling; o.forEach(function(t){ if (t === p) tkn = true; }); if (!tkn && p) o.push(p); }); o.type = 'html'; o.isj$ = true; return j$.find(o); }; } if (out.type == 'html') { out.next = function() { var o = []; out.each(function(el){ var tkn = false; var p = el.nextElementSibling; o.forEach(function(t){ if (t === p) tkn = true; }); if (!tkn && p) o.push(p); }); o.type = 'html'; o.isj$ = true; return j$.find(o); }; } if (out.type == 'html') { out.addHTML = function(htm, pfx) { if (htm !== 0) htm = htm || ''; htm = htm.toString(); if (!is.def(pfx)) pfx = x; htm = rplc('\\'+pfxr, '$j$PFXR', htm); htm = rplc(pfxr, pfx, htm); htm = rplc('$j$PFXR', pfxr, htm); out.each(function(el){ el.innerHTML += htm; }); return out; }; } if (out.type == 'html') { out.delHTML = function() { out.each(function(el){ el.innerHTML = ''; }); return out; }; } if (out.type == 'html') { out.addAttr = function(atr, val) { atr = atr || {}; out.each(function(el){ if (is.str(atr)) { el.setAttribute(atr, val); } else { for (var k in atr) { el.setAttribute(k, atr[k]); } } }); return out; }; } if (out.type == 'html') { out.delAttr = function() { var atr = arguments; out.each(function(el){ for (var i = 0; i < atr.length; i++) { el.removeAttribute(atr[i]); } }); return out; }; } if (out.type == 'html') { out.addClass = function(cls, pfx) { if (!is.def(pfx)) pfx = x; if (pfx) pfx += '-'; cls = cls || ''; if (is.arr(cls)) { cls = cls.join(' '); } cls = cls.replace('\n', ' '); cls = cls.replace(/\s+/g,' '); cls = cls.split(' '); out.each(function(el){ cls.forEach(function(cls){ cls = cls.trim(); if (cls) el.classList.add(pfx+cls); }); if ( !el.classList.length && is.def(el.attributes['class']) ) { el.removeAttribute('class'); } }); return out; }; } if (out.type == 'html') { out.delClass = function(cls, pfx) { if (!is.def(pfx)) pfx = x; if (pfx) pfx += '-'; cls = cls || ''; if (is.arr(cls)) { cls = cls.join(' '); } cls = cls.replace('\n', ' '); cls = cls.replace(/\s+/g,' '); cls = cls.split(' '); out.each(function(el){ cls.forEach(function(cls){ cls = cls.trim(); if (cls) el.classList.remove(pfx+cls); }); if ( !el.classList.length && is.def(el.attributes['class']) ) { el.removeAttribute('class'); } }); return out; }; } if (out.type == 'html') { out.pfxClass = function(pfx) { if (!is.def(pfx)) pfx = x; out.each(function(el){ var cls = el.classList; clss = []; cls.forEach(function(cls){ cls = cls.replace(pfx+'-', ''); clss.push(cls); }); el.className = ''; j$.find(el).addClass(clss, pfx); }); return out; }; } if (out.type == 'html') { out.addCSS = function(cls, val) { cls = cls || {}; out.each(function(el){ if (is.str(cls)) { el.style[cls] = val; } else { for (var k in cls) { el.style[k] = cls[k]; } } }); return out; }; } if (out.type == 'html') { out.on = function(ev, fn) { var doc = document; if (is.str(ev)) ev = [ev]; ev.forEach(function(ev){ out.each(function(el){ if (!is.def(el.j$EventListeners)) { el.j$EventListeners = {}; el.j$EventListeners.length = 0; } var j$ls = el.j$EventListeners; j$ls.length++; j$ls['f'+j$ls.length] = fn; if (el == doc && ev == 'ready') { ev = 'DOMContentLoaded'; doc.readyState != 'loading' ? fn(null, el) : el.addEventListener(ev, function(e){ fn(e, el); }); } else { el.addEventListener(ev, function(e){ fn(e, el); }); } }); }); return out; }; } if (out.type == 'html') { out.off = function(ev, fn) { var doc = document; if (is.str(ev)) ev = [ev]; ev.forEach(function(ev){ out.each(function(el){ if (!is.def(el.j$EventListeners)) { el.j$EventListeners = {}; el.j$EventListeners.length = 0; } var j$ls = el.j$EventListeners; if (el == doc && ev == 'ready') { ev = 'DOMContentLoaded'; } if (is.def(fn)) { el.removeEventListener(ev, fn); } else { for (var i = 0; i < j$ls.length; i++) { el.removeEventListener(ev, j$ls['f'+i]); } el.j$EventListeners = {}; } }); }); return out; }; } if (out.type == 'html') { out.trigger = function(ev, data) { var doc = document; data = data || null; if (is.str(ev)) ev = [ev]; ev.forEach(function(ev){ out.each(function(el){ try { var event = document.createEvent('HTMLEvents'); event.initEvent(ev, true, false); event.detail = data; } catch (err) { if (window.CustomEvent && is.fun(window.CustomEvent)) { var event = new CustomEvent(ev, { detail: data }); } else { var event = document.createEvent('CustomEvent'); event.initCustomEvent(ev, true, true, data); } } el.dispatchEvent(event); }); }); return out; }; } if (out.type == 'event') { out.stop = function() { out.each(function(e){ var evt = e ? e:window.event; if (evt.stopPropagation) evt.stopPropagation(); if (evt.cancelBubble != null) evt.cancelBubble = true; }); return out; }; } return out; }; j$.$ = j$.find; for (var k in j$) { j$.$[k] = j$[k]; } return j$; };function domObserve(el, cb) { var mo = new MutationObserver(function(mu) { mu.forEach(function(m) { for (var i = 0; i < m.addedNodes.length; i++) { var o = m.addedNodes[i]; if (o.tagName) cb('add', m.addedNodes[i]); } for (var i = 0; i < m.removedNodes.length; i++) { var o = m.removedNodes[i]; if (o.tagName) cb('del', m.removedNodes[i]); } if (m.type == 'attributes') { cb('atr', m.target); } }); }); mo.observe(el, { attributes: true, childList: true, subtree: true }); return mo; };console.log('Init PSMod'); console.log(cfg); })();